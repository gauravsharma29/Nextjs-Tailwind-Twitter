// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  username        String?        @unique
  bio             String?
  email           String?        @unique
  emailverified   DateTime?
  image           String?
  coverImage      String?
  profileImage    String?
  hashedpassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  followingIds    String[]       @db.ObjectId
  hasNotification Boolean?
  // Relations
  posts           Post[]
  comments        Comment[]
  notifications   Notification[]
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  likesIds  String[] @db.ObjectId

  // Relations
  // here we are saying we have created userId field with references to ID field in User Model
  // OnDelete: Cascade - If user delete do delete this post Object for this user also
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  userId    String   @db.ObjectId
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
